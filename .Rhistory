Sys.getenv("PATH")
system('g++ -v')
install.packages('RMySQL',type='source')
R CMD INSTALL RMySQL_0.8-0.tar.gz
library(datasets)
data(iris)
s <- split(iris,iris$Species)
s <- split(airquality,airquality$Month)
x
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
s
s <- split(iris,iris$Species)
s
lapply(s,function(iris) colMeans(iris[,c("Species")],na.rm=TRUE))
lapply(s,function(x) colMeans(x[,c("Species")],na.rm=TRUE))
s <- split(iris,iris$Species)
lapply(s,function(x) colMeans(x[,c("Species")],na.rm=TRUE))
x
s <- split(airquality,airquality$Month)
s
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
s
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
t <- split(iris,iris$Species)
t
lapply(t,function(x) colMeans(x[,c("Sepal.Length")],na.rm=TRUE))
t <- split(iris,iris$Species)
t
lapply(t,function(x) colMeans(x[,c("Species","Sepal.Length")],na.rm=TRUE))
lapply(t,function(x) colMeans(x[,c("Sepal.Width","Sepal.Length")],na.rm=TRUE))
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
x <- split(mtcars,mtcars$cyl)
x
u <- split(mtcars,mtcars$cyl)
lapply(u,function(x) colMeans(x[,c("mpg","disp")],na.rm=TRUE))
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
t
with(iris, tapply(Sepal.Width, species, mean))
with(iris, tapply(Sepal.Width, Species, mean))
with(iris, tapply(Sepal.Length, Species, mean))
with(mtcars, tapply(mpg, cyl, mean))
x <- with(mtcars, tapply(mpg, cyl, mean))
x
u <- split(mtcars,mtcars$cyl)
head(u)
head(mtcars)
x <- with(mtcars, tapply( hp, cyl, mean))
x
x[1]
x[3]
abs(x[1]-x[3])
?mtcars
debug(ls)
ls
ls
debug(ls)
ls\
ls
ls
debug(ls)
ls
ls(1)
ls
rpois
rnorm
x <- rnorm(10)
x
x <- rnorm(10,20,2)
x
rnorm
summary(x)
x <- rnorm(10,20,2)
summary(x)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
spois(10,1)
rspois(10,1)
rpois(10,1)
ppois(2,2) ##Cumulative distribution
ppois(4,2)
ppois(6,2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x +e
summary(y)
plot(x,y)
x <- rbinom(100,1,0.5)
set.seed(20)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x +e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100,exp(log.mu))
summary(y)
summary(y)
set.seed(1)
x <- rnorm(100)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10) ##permutation
sample(1:10)
sample(1:10, replace = TRUE)##Sample with replacement
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {
i <- 1:n
1 / outer(i-1.i,"+")
}
x <- hilbert(1000)
hilbert <- function(n) {
i <- 1:n
1 / outer(i-1,i,"+")
}
x <- hilbert(1000)
system.time(svd(x))
lm(y~x)
rpois(10,1)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
x <- rnorm(100)
x
x <- rnorm(100)
x
?ppois
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
library(lattice)
library(dataset)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality,Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
install.packages(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,geom=c("point","smoth"))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=.~drv,binwidth=2)
qplot(displ,hwy,data=mpg,facets=.~drv,binwidth=2)
qplot(hwy,data=mpg,facets=.~drv,binwidth=2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
str(maacs)
str(maacs)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
setwd("C:/Users/js1/Dropbox/Repository/RepData_PeerAssessment1")
activity = read.csv("activity.csv", header = TRUE, sep=",",colClasses = "character", na.strings = "NA")
activity$date <- as.Date(activity$date)
summary(activity)
q<-qplot(date, weight=activity$steps, data=activity, geom="histogram")
library(ggplot2)
print(q)
q<-qplot(date, weight=activity$steps, data=activity, geom="histogram")
print(q)
library(ggplot2)
q<-qplot(date, weight=activity$steps, data=activity, geom="histogram")
print(q)
activity = read.csv("activity.csv", sep=",", na.strings = "NA")
activity$date <- as.Date(activity$date)
summary(activity)
library(ggplot2)
q<-qplot(date, weight=activity$steps, data=activity, geom="histogram")
print(q)
mean(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
median(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
average_steps<-data.frame(cbind(activity$interval,tapply(activity$steps, activity$interval, mean, na.rm = TRUE)))
colnames(average_steps) <- c("interval","steps")
q<-ggplot(data=average_steps,aes(x=interval,y=steps, color=steps)) +
geom_line()
print(q)
sum(is.na(activity))
average_steps <- average_steps[!duplicated(average_steps),]
nrow(average_steps)
fixed <- activity
for (i in 1:nrow(fixed)) {
if (is.na(fixed[i, "steps"])){
x <- fixed[i, "interval"]
temp <- average_steps[average_steps$interval == x,]
fixed[i,"steps"] <- temp$steps
}
}
q<-qplot(date, weight=fixed$steps, data=fixed, geom="histogram")
print(q)
weekdays()
?weekdays
fixed$date
!(weekdays(fixed$date %in% c('Saturday','Sunday'))
)
?isWeekend
isWeekend( as.timeDate( seq( as.Date("2011-01-01"),  to=as.Date("2011-01-07"), by=1 ) ) )
install.packages("timeDate")
library(timeDate)
isWeekend( as.timeDate( seq( as.Date("2011-01-01"),  to=as.Date("2011-01-07"), by=1 ) ) )
?isWeekend
isWeekend(fixed$date)
test <- isWeekend(fixed$date, by=1)
test <- isWeekend(fixed$date)
test
head(test)
isWeekend(fixed$date)
fixed[isWeekend(fixed$date)]
fixed$wk[isWeekend(fixed$date)]
fixed$wk
fixed
isWeekend(fixed$date)
View(temp)
for (i in 1:nrow(fixed)) {
if (isWeekend(fixed[i, "date"])){
#fixed[, 'wk'] <- as.factor(fixed[, 'cyl'])
}
}
for (i in 1:nrow(fixed)) {
if (isWeekend(fixed[i, "date"])){
print(fixed[i, "date"])
#fixed[, 'wk'] <- as.factor(fixed[, 'cyl'])
}
}
fixed$wk <- as.factor(fixed$wk)
fixed$wk <- NA
setwd("C:/Users/js1/Dropbox/Repository/RepData_PeerAssessment1")
activity = read.csv("activity.csv", sep=",", na.strings = "NA")
activity$date <- as.Date(activity$date)
summary(activity)
library(ggplot2)
q<-qplot(date, weight=activity$steps, data=activity, geom="histogram")
print(q)
mean(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
median(tapply(activity$steps, activity$date, sum, na.rm = TRUE))
average_steps<-data.frame(cbind(activity$interval,tapply(activity$steps, activity$interval, mean, na.rm = TRUE)))
colnames(average_steps) <- c("interval","steps")
q<-ggplot(data=average_steps,aes(x=interval,y=steps, color=steps)) +
geom_line()
print(q)
sum(is.na(activity))
average_steps <- average_steps[!duplicated(average_steps),]
nrow(average_steps)
fixed <- activity
for (i in 1:nrow(fixed)) {
if (is.na(fixed[i, "steps"])){
x <- fixed[i, "interval"]
temp <- average_steps[average_steps$interval == x,]
fixed[i,"steps"] <- temp$steps
}
}
q<-qplot(date, weight=fixed$steps, data=fixed, geom="histogram")
print(q)
for (i in 1:nrow(fixed)) {
if (isWeekend(fixed[i, "date"])){
print(fixed[i, "date"])
fixed[i, "wk"] <- "weekend"
} else {
fixed[i, "wk"] <- "weekday"
}
}
View(fixed)
fixed <- activity
for (i in 1:nrow(fixed)) {
if (is.na(fixed[i, "steps"])){
x <- fixed[i, "interval"]
temp <- average_steps[average_steps$interval == x,]
fixed[i,"steps"] <- temp$steps
}
}
for (i in 1:nrow(fixed)) {
if (isWeekend(fixed[i, "date"])){
#print(fixed[i, "date"])
fixed[i, "wk"] <- "weekend"
} else {
fixed[i, "wk"] <- "weekday"
}
}
fixed$wk <- as.factor(fixed$wk)
q<-ggplot(data=average_steps,aes(x=interval,y=steps, color=steps)) +
geom_line()
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps, color=steps)) + geom_line()
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps, color=steps)) + geom_line() + facet_grid(wk ~ .)
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + geom_line() + facet_grid(wk ~ .)
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + geom_smooth() + facet_grid(wk ~ .)
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .)
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_smooth()
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
print(q)
qplot(interval, steps, data=fixed, facets = wk ~ .)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+opts(
legend.position = c(1, 1)
)
print(q)
theme_get()
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ ylab("Number of Steps") +
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ scale_y_continuous("Number of Steps") +
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ labs(y = "Number of Steps")
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ ylab("Number of Steps")
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ theme(axis.title.y = "Number of Steps")
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ theme(axis.text.y  = "Number of Steps")
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ theme( legend.text   = "Number of Steps")
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
+ theme(  plot.title  = "Number of Steps")
print(q)
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
q + theme(panel.background = element_rect(colour = "pink"))
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
q + theme(axis.text.y = "bababa")
q<-ggplot(data=fixed,aes(x=interval,y=steps)) + facet_grid(wk ~ .) + geom_line()
q + axis.text.y = "bababa"
